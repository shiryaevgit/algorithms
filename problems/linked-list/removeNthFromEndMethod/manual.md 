<- тут код для оптимального решения + описание (ДНЕВНИК РЕШЕНИЙ)

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in hashmap:
                return [i, hashmap[complement]]
            hashmap[nums[i]] = i


Оценка по времени: O(n), где n - размер списка nums
Объяснения: делаем 1 проход по массиву, который образует n итераций,
а на каждой итерации работаем со словарем, поиск и вставка в словаре работают за O(1),
поэтому оценка по времени O(n)

Оценка по памяти: O(n), где n - размер списка nums
Объяснения: самый худший случай, когда ответ - последние 2 элемента.
В этом случае у нас в словаре будут находится n-1 элементов,
поэтому оценка по памяти O(n) (O(n), а не O(n-1) т к в big O нотации
константы принято опускать)

Описание решения
Используем словарь для хранения позиции каждого элемента,
где ключ - значение элементы массива, значение - позиция элемента.
Eсли находим в словаре элемент равный target - nums[i],
значит есть пара дающая в сумме target и возвращаем позицию элементов