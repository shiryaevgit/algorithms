```
func reverseList(head *ListNode) *ListNode {
	var prev *ListNode = nil

	cur := head
	tmp := cur

	for cur != nil {
		tmp = cur
		cur = cur.Next
		tmp.Next = prev
		prev = tmp
	}
	return prev
}
```

Оценка по времени: O(n), где n - размер списка
Объяснения:
при итерации O(n)
В лучшем случае О(1) при len=1
В худшем случае O(n)

Оценка по памяти:  
O(1)
Не используем рекурсию поэтому O(1)

Объяснение решения:
меняем направление указателей в списке на обратный. 
Используем переменную *ListNode, чтобы новый tail указывал на nil 

1. объявляется переменная rev типа *ListNode и инициализируется значением nil (предыдущиий элемент)
2. создаются две переменные cur и tmp указывающие на head
3. при итерации по списку, пока cur!=nil 
4. делаем шаг по списку двумя указателями cur и tmp. 
```
 tmp=cur
 cur=cur.next
```
5. меняем значение(направление)указателя tmp.next=prev
6. сдвигаем prev=tmp


