```variant#1
func hasCycle(head *ListNode) bool {
 slow,fast:=head,head
 
 for fast!=nil && fast.Next!=nil{
     slow=slow.Next
     fast=fast.Next.Next
 
     if slow==fast{
         return true
     }
 }   
 return false
}
```

Оценка по времени: O(n), где n - размер списка
Оценка по памяти:O(1)
Не используем рекурсию поэтому O(1)



Объяснение решения:
Создаем два указателя и двигаем их по списку
выход из списка: 
1. Когда элементы списка на которые они указывают указатели будут равны
2. Когда fast и fast.Next = nil

и когда они встретятся это будет о

1. создаем  slow,fast
2. вычисляем длину списка вместе с dummyNode
3. при итерации по списку доходим до элемента, после которого удаляемый (length-n-1)
4. возвращает результат, начиная с dummyNode.Next


