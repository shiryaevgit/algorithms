```variant#1

type NumMatrix struct {
	ps [][]int
}

func Constructor(matrix [][]int) NumMatrix {
	n := len(matrix)    //количество массивов
	m := len(matrix[0]) // длинна массива

	ps := make([][]int, n+1) // создаем 6 пустых массивов
	for i := range ps {      // добавляем в каждый по len(matrix[0]+1
		ps[i] = make([]int, m+1)
	}
	fmt.Println(ps)

	for i := 1; i <= n; i++ { // кол-во массивов

		for j := 1; j <= m; j++ { //кол-во эл-ов

			otherSum := ps[i-1][j] + ps[i][j-1] - ps[i-1][j-1]

			ps[i][j] = matrix[i-1][j-1] + otherSum
		}
	}

	return NumMatrix{ps: ps}
}

func (nm *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {
	row2++
	col2++
	return nm.ps[row2][col2] - nm.ps[row1][col2] - nm.ps[row2][col1] + nm.ps[row1][col1]
}

```

Оценка по времени: O(n * m)
n-количество массивов
m-количество элементов

Оценка по памяти:
O(n * m)

Объяснение решения:
1. в конструкторе создаем пустой массив, заполняем его префиксной суммой элементов
2. вычитаем из общей суммы левый и верхний квадраты и добавляем угловой(тот который вычли два раза) 

```variant#2

```