```variant#1

func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {
	dummyNode := &ListNode{}
	cur := dummyNode

	for list1 != nil && list2 != nil {
		if list1.Val < list2.Val {
			cur.Next = list1
			list1 = list1.Next
		} else {
			cur.Next = list2
			list2 = list2.Next
		}
		cur = cur.Next
	}

	if list1 != nil {
		cur.Next = list1
	} else {
		cur.Next = list2
	}

	return dummyNode.Next
}
```

Оценка по времени: O(n), где n - размер списка
Объяснения:
при вычислении len, O(n)
при поиске элемента для удаления, так же O(n)
В сумме в худшем случае О(2n), в big аннотации O(n)
В лучшем случае O(2)

Оценка по памяти:  
O(1)
Не используем рекурсию поэтому O(1)

Объяснение решения:
1. создаем фиктивную вершину dummyNode
2. вычисляем длину списка вместе с dummyNode
3. при итерации по списку доходим до элемента, после которого удаляемый (length-n-1)
4. возвращает результат, начиная с dummyNode.Next
